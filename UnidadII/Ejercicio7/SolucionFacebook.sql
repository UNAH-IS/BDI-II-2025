--Se le solicita realizar los siguientes incisos:
--1. Consultar la cantidad de likes por publicación.
SELECT *
FROM TBL_USUARIOS;

SELECT *
FROM TBL_PUBLICACIONES;

SELECT B.CODIGO_PUBLICACION,
        B.CONTENIDO_PUBLICACION,
        COUNT(A.CODIGO_PUBLICACION) AS CANTIDAD_LIKES
FROM TBL_LIKE_PUBLICACIONES A
RIGHT JOIN TBL_PUBLICACIONES B
ON (A.CODIGO_PUBLICACION = B.CODIGO_PUBLICACION)
GROUP BY    B.CODIGO_PUBLICACION, 
            B.CONTENIDO_PUBLICACION;


--2. Consultar la cantidad de likes por fotografía.
SELECT A.CODIGO_FOTO, A.DESCRIPCION_FOTO,
         COUNT(B.CODIGO_FOTO) AS CANTIDAD_LIKES
FROM TBL_FOTOS A
LEFT JOIN TBL_LIKE_FOTOGRAFIAS B
ON (A.CODIGO_FOTO = B.CODIGO_FOTO)
GROUP BY A.CODIGO_FOTO, A.DESCRIPCION_FOTO;

--3. Consultar los grupos en los cuales la cantidad de usuarios sea mayor que 5, mostrar el nombre
--del grupo y la cantidad de usuarios.
SELECT *
FROM TBL_GRUPOS;

SELECT A.CODIGO_GRUPO, 
       A.NOMBRE_GRUPO, 
       COUNT(B.CODIGO_USUARIO) AS CANTIDAD_USUARIOS
FROM TBL_GRUPOS A
LEFT JOIN  TBL_GRUPOS_X_USUARIO B
ON A.CODIGO_GRUPO = B.CODIGO_GRUPO
GROUP BY A.CODIGO_GRUPO, 
         A.NOMBRE_GRUPO
HAVING COUNT(B.CODIGO_USUARIO) > 5;


--4. Mostrar la cantidad de amistades pendientes y rechazadas.
SELECT B.NOMBRE_ESTATUS, COUNT(*) AS CANTIDAD_SOLICITUDES
FROM TBL_AMIGOS A
INNER JOIN TBL_ESTATUS_SOLICITUDES B
ON A.CODIGO_ESTATUS = B.CODIGO_ESTATUS
WHERE A.CODIGO_ESTATUS IN (2, 3)
GROUP BY B.NOMBRE_ESTATUS;

-- POR USUARIO
SELECT   A.CODIGO_USUARIO,
         C.NOMBRE_USUARIO,
         B.NOMBRE_ESTATUS, 
         COUNT(*) AS CANTIDAD_SOLICITUDES
FROM TBL_AMIGOS A
INNER JOIN TBL_ESTATUS_SOLICITUDES B
ON A.CODIGO_ESTATUS = B.CODIGO_ESTATUS
INNER JOIN TBL_USUARIOS C 
ON A.CODIGO_USUARIO = C.CODIGO_USUARIO
WHERE A.CODIGO_ESTATUS IN (2, 3)
GROUP BY A.CODIGO_USUARIO,
         B.NOMBRE_ESTATUS, 
         C.NOMBRE_USUARIO
ORDER BY A.CODIGO_USUARIO, 
         B.NOMBRE_ESTATUS;

SELECT *
FROM TBL_USUARIOS;



SELECT *
FROM TBL_ESTATUS_SOLICITUDES;


--5. Mostrar el usuario con mayor cantidad de amigos confirmados (El más cool).
SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_AMIGOS
FROM TBL_AMIGOS
WHERE CODIGO_ESTATUS = 1
GROUP BY CODIGO_USUARIO
HAVING COUNT(*) = (
    SELECT MAX(CANTIDAD_AMIGOS)
    FROM (
        SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_AMIGOS
        FROM TBL_AMIGOS
        WHERE CODIGO_ESTATUS = 1
        GROUP BY CODIGO_USUARIO
    )
)
ORDER BY CANTIDAD_AMIGOS DESC;
--FETCH FIRST 1 ROWS ONLY;


WITH AMIGOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_AMIGOS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
)
SELECT  A.CODIGO_USUARIO,  
        B.NOMBRE_USUARIO,
        A.CANTIDAD_AMIGOS
FROM AMIGOS A
INNER JOIN TBL_USUARIOS B
ON A.CODIGO_USUARIO = B.CODIGO_USUARIO
WHERE CANTIDAD_AMIGOS = (
    SELECT MAX(CANTIDAD_AMIGOS)
    FROM AMIGOS
);




SELECT *
FROM TBL_ESTATUS_SOLICITUDES;


--6. Mostrar el usuario con más solicitudes rechazadas (Forever alone).
SELECT *
FROM TBL_ESTATUS_SOLICITUDES;

SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_RECHAZADAS
FROM TBL_AMIGOS
WHERE CODIGO_ESTATUS = 2
GROUP BY CODIGO_USUARIO
HAVING COUNT(*) = (
    SELECT MAX(CANTIDAD_RECHAZADAS)
    FROM (
        SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_RECHAZADAS
        FROM TBL_AMIGOS
        WHERE CODIGO_ESTATUS = 2
        GROUP BY CODIGO_USUARIO
    )
)
ORDER BY CANTIDAD_RECHAZADAS DESC;


WITH RECHAZADAS AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_RECHAZADAS
    FROM TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 2
    GROUP BY CODIGO_USUARIO
)
SELECT A.CODIGO_USUARIO,
        B.NOMBRE_USUARIO,
        A.CANTIDAD_RECHAZADAS
FROM RECHAZADAS A
INNER JOIN TBL_USUARIOS B
ON A.CODIGO_USUARIO = B.CODIGO_USUARIO
WHERE CANTIDAD_RECHAZADAS = (
    SELECT MAX(CANTIDAD_RECHAZADAS)
    FROM RECHAZADAS
);

--7. Mostrar la cantidad de usuarios registrados mensualmente.
SELECT  TO_CHAR(FECHA_REGISTRO, 'YYYY') AS ANIO,
        TO_CHAR(FECHA_REGISTRO, 'MM') AS MES,
        TO_CHAR(FECHA_REGISTRO, 'YYYY-MONTH') AS MES_REGISTRO,
        COUNT(*) AS CANTIDAD_USUARIOS
FROM TBL_USUARIOS
GROUP BY    TO_CHAR(FECHA_REGISTRO, 'YYYY'),
            TO_CHAR(FECHA_REGISTRO, 'MM'), 
            TO_CHAR(FECHA_REGISTRO, 'YYYY-MONTH')
ORDER BY 1, 2;


SELECT TO_CHAR(SYSDATE, 'MONTH') AS MES
FROM DUAL;

--8. Mostrar la edad promedio de los usuarios por género.
SELECT GENERO_USUARIO, ROUND(AVG(EDAD), 2) AS EDAD_PROMEDIO
FROM TBL_USUARIOS
GROUP BY GENERO_USUARIO;


--9. Con respecto al historial de accesos se necesita saber el crecimiento de los accesos del día 19 de
--agosto del 2015 con respecto al día anterior, la fórmula para calcular dicho crecimiento se
--muestra a continuación:
--
--((b-a)/a) * 100
--
--Donde:
--a = Cantidad de accesos del día anterior (18 de Agosto del 2015)
--b = Cantidad de accesos del día actual (19 de Agosto del 2015)
--Mostrar el resultado como un porcentaje (Concatenar %)
--

SELECT (((6-2)/2) * 100) || '%' AS CRECIMIENTO_ACCESOS
FROM DUAL;


SELECT (((
            SELECT COUNT(*) AS CANTIDAD_ACCESOS
            FROM TBL_HISTORIAL_ACCESOS
            WHERE FECHA_HORA_ACCESO = TO_DATE('2015-08-19', 'YYYY-MM-DD')
        ) - (
            SELECT COUNT(*) AS CANTIDAD_ACCESOS
            FROM TBL_HISTORIAL_ACCESOS
            WHERE FECHA_HORA_ACCESO = TO_DATE('2015-08-18', 'YYYY-MM-DD')
        ))/ (
            SELECT COUNT(*) AS CANTIDAD_ACCESOS
            FROM TBL_HISTORIAL_ACCESOS
            WHERE FECHA_HORA_ACCESO = TO_DATE('2015-08-18', 'YYYY-MM-DD')
        )) * 100 || '%' AS CRECIMIENTO_ACCESOS
FROM DUAL;




WITH B AS (
    SELECT COUNT(*) AS CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE FECHA_HORA_ACCESO = TO_DATE(:FECHA_ACTUAL, 'YYYY-MM-DD')
),
A AS (
    SELECT COUNT(*) AS CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    WHERE FECHA_HORA_ACCESO = TO_DATE(:FECHA_ANTERIOR, 'YYYY-MM-DD')
)
SELECT  A.CANTIDAD_ACCESOS,
        B.CANTIDAD_ACCESOS,
        ((B.CANTIDAD_ACCESOS-A.CANTIDAD_ACCESOS)/A.CANTIDAD_ACCESOS) * 100 || '%' AS CRECIMIENTO_ACCESOS
FROM A, B;


--10. Crear una consulta que muestre lo siguiente:
--• Nombre del usuario.
--• País donde pertenece.
--• Cantidad de publicaciones que tiene.
--• Cantidad de amigos confirmados.
--Cantidad de likes que ha dado.
--• Cantidad de fotos en las que ha sido etiquetado.
--• Cantidad de accesos en el historial.
--Tip: utilice subconsultas.
--11. De la consulta anterior cree una vista materializada y utilícela desde una tabla dinámica en Excel
--para mostrar una gráfica de línea que muestre la cantidad de amigos por cada usuario.


CREATE MATERIALIZED VIEW MVW_USUARIOS_RESUMEN AS
WITH PUBLICACIONES AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_PUBLICACIONES
    FROM TBL_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
),
AMIGOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_AMIGOS
    FROM  TBL_AMIGOS
    WHERE CODIGO_ESTATUS = 1
    GROUP BY CODIGO_USUARIO
),
LIKES_PUBLICACIONES AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_LIKES_PUBLICACIONES
    FROM TBL_LIKE_PUBLICACIONES
    GROUP BY CODIGO_USUARIO
), 
LIKES_FOTOGRAFIAS AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_LIKES_FOTOS
    FROM TBL_LIKE_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ETIQUETAS AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_FOTOS_ETIQUETADAS
    FROM TBL_ETIQUETA_FOTOGRAFIAS
    GROUP BY CODIGO_USUARIO
),
ACCESOS AS (
    SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_ACCESOS
    FROM TBL_HISTORIAL_ACCESOS
    GROUP BY CODIGO_USUARIO
)
SELECT A.CODIGO_USUARIO, A.NOMBRE_USUARIO, 
        B.NOMBRE_PAIS,
        NVL(C.CANTIDAD_PUBLICACIONES, 0) AS CANTIDAD_PUBLICACIONES,
        NVL(D.CANTIDAD_AMIGOS, 0) AS CANTIDAD_AMIGOS,
        NVL(E.CANTIDAD_LIKES_PUBLICACIONES, 0) +
        NVL(F.CANTIDAD_LIKES_FOTOS, 0) AS TOTAL_LIKES,
        NVL(G.CANTIDAD_FOTOS_ETIQUETADAS, 0) AS CANTIDAD_FOTOS_ETIQUETADAS,
        NVL(H.CANTIDAD_ACCESOS, 0) AS CANTIDAD_ACCESOS
FROM TBL_USUARIOS A 
LEFT JOIN TBL_PAISES B 
ON A.CODIGO_PAIS = B.CODIGO_PAIS
LEFT JOIN PUBLICACIONES C
ON A.CODIGO_USUARIO = C.CODIGO_USUARIO
LEFT JOIN AMIGOS D
ON A.CODIGO_USUARIO = D.CODIGO_USUARIO
LEFT JOIN LIKES_PUBLICACIONES E
ON A.CODIGO_USUARIO = E.CODIGO_USUARIO
LEFT JOIN LIKES_FOTOGRAFIAS F
ON A.CODIGO_USUARIO = F.CODIGO_USUARIO
LEFT JOIN ETIQUETAS G
ON A.CODIGO_USUARIO = G.CODIGO_USUARIO
LEFT JOIN ACCESOS H
ON A.CODIGO_USUARIO = H.CODIGO_USUARIO
ORDER BY A.CODIGO_USUARIO;


SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_PUBLICACIONES
FROM TBL_PUBLICACIONES
GROUP BY CODIGO_USUARIO;

SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_AMIGOS
FROM  TBL_AMIGOS
WHERE CODIGO_ESTATUS = 1
GROUP BY CODIGO_USUARIO;


SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_LIKES_PUBLICACIONES
FROM TBL_LIKE_PUBLICACIONES
GROUP BY CODIGO_USUARIO;

SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_LIKES_FOTOS
FROM TBL_LIKE_FOTOGRAFIAS
GROUP BY CODIGO_USUARIO;

SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_FOTOS_ETIQUETADAS
FROM TBL_ETIQUETA_FOTOGRAFIAS
GROUP BY CODIGO_USUARIO;

SELECT CODIGO_USUARIO, COUNT(*) AS CANTIDAD_ACCESOS
FROM TBL_HISTORIAL_ACCESOS
GROUP BY CODIGO_USUARIO;


SELECT *
FROM MVW_USUARIOS_RESUMEN;


BEGIN
    DBMS_MVIEW.REFRESH ('MVW_USUARIOS_RESUMEN');
END;